{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Visualization & Metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prerequisites"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`Plotly` is used for interactive charts (hover, toggle, zoom). Reference the [Installation](installation.html#Plotting) section for information about configuring Plotly. However, static images are used in this notebook due to lack of support for 3rd party JS in the documentation portal."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Overview"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As described in the [Low-Level Docs](api_low_level.html#10.-Assess-the-Results.), every training `Job` automatically generates metrics when evaluated against each split/ fold. \n",
    "\n",
    "The `Algorithm.analysis_type` determines which metrics and plots are prepared:\n",
    "\n",
    "* Although `'classification_multi'` and `'classification_binary'` share the same metrics and plots, they go about producing these artifacts differently. For example, ROC curves `roc_multi_class=None` vs `roc_multi_class='ovr'`.\n",
    "\n",
    "* `'regression'`, unlike the classification analyses, does not have an 'accuracy' metric, so we substitute 'r2', R^2 (coefficient of determination, for it. There are no regression-specific plots. Note that unsupervised/ self-supervised models are also considered a regression."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll use the `datum` and `tests` modules to rapidly generate a couple examples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from aiqc import datum\n",
    "from aiqc import tests"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's quickly generate a trained classification model to inspect."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "queue_multiclass = tests.make_test_queue('keras_multiclass')\n",
    "queue_multiclass.run_jobs()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Queue Visualization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`plot_performance` aka the \"boomerang chart\" is unique to AIQC, and it really brings the benefits of the library to light. Each model from the Queue is evaluated against all splits/ folds."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When performing classification, the secondary training metric (non-loss) is 'accuracy'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "queue_multiclass.plot_performance(\n",
    "    max_loss = 1.5, min_accuracy = 0.70\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Classify Boomerang](../images/plot_classify_boomerang.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Queue Metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* `selected_metrics:list` - If you get overwhelmed by the variety of metrics returned, then you can include the ones you want selectively by name.\n",
    "* `sort_by:str` - You can sort the dataframe by any column name.\n",
    "* `ascending:bool=False` - Descending if False."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hyperparamcombo_id</th>\n",
       "      <th>job_id</th>\n",
       "      <th>predictor_id</th>\n",
       "      <th>split</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>f1</th>\n",
       "      <th>loss</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>roc_auc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>18</td>\n",
       "      <td>train</td>\n",
       "      <td>0.921569</td>\n",
       "      <td>0.920468</td>\n",
       "      <td>0.219878</td>\n",
       "      <td>0.936508</td>\n",
       "      <td>0.921569</td>\n",
       "      <td>0.996828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>18</td>\n",
       "      <td>validation</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.855769</td>\n",
       "      <td>0.329010</td>\n",
       "      <td>0.870370</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.972789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>18</td>\n",
       "      <td>test</td>\n",
       "      <td>0.962963</td>\n",
       "      <td>0.962848</td>\n",
       "      <td>0.203578</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.962963</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   hyperparamcombo_id  job_id  predictor_id       split  accuracy        f1  \\\n",
       "0                  10      10            18       train  0.921569  0.920468   \n",
       "1                  10      10            18  validation  0.857143  0.855769   \n",
       "2                  10      10            18        test  0.962963  0.962848   \n",
       "\n",
       "       loss  precision    recall   roc_auc  \n",
       "0  0.219878   0.936508  0.921569  0.996828  \n",
       "1  0.329010   0.870370  0.857143  0.972789  \n",
       "2  0.203578   0.966667  0.962963  1.000000  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "queue_multiclass.metrics_to_pandas(\n",
    "    selected_metrics=None\n",
    "    , sort_by='predictor_id'\n",
    "\t, ascending=True\n",
    ").head(6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These are also aggregated by metric across all splits/folds."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hyperparamcombo_id</th>\n",
       "      <th>job_id</th>\n",
       "      <th>predictor_id</th>\n",
       "      <th>metric</th>\n",
       "      <th>maximum</th>\n",
       "      <th>minimum</th>\n",
       "      <th>pstdev</th>\n",
       "      <th>median</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>19</td>\n",
       "      <td>accuracy</td>\n",
       "      <td>0.962963</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.043541</td>\n",
       "      <td>0.921569</td>\n",
       "      <td>0.913891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>19</td>\n",
       "      <td>f1</td>\n",
       "      <td>0.962848</td>\n",
       "      <td>0.855769</td>\n",
       "      <td>0.044030</td>\n",
       "      <td>0.920468</td>\n",
       "      <td>0.913028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>19</td>\n",
       "      <td>loss</td>\n",
       "      <td>0.329010</td>\n",
       "      <td>0.203578</td>\n",
       "      <td>0.055686</td>\n",
       "      <td>0.219878</td>\n",
       "      <td>0.250822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>19</td>\n",
       "      <td>precision</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.870370</td>\n",
       "      <td>0.040217</td>\n",
       "      <td>0.936508</td>\n",
       "      <td>0.924515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>19</td>\n",
       "      <td>recall</td>\n",
       "      <td>0.962963</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.043541</td>\n",
       "      <td>0.921569</td>\n",
       "      <td>0.913891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>19</td>\n",
       "      <td>roc_auc</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.972789</td>\n",
       "      <td>0.012149</td>\n",
       "      <td>0.996828</td>\n",
       "      <td>0.989872</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   hyperparamcombo_id  job_id  predictor_id     metric   maximum   minimum  \\\n",
       "0                  10      10            19   accuracy  0.962963  0.857143   \n",
       "1                  10      10            19         f1  0.962848  0.855769   \n",
       "2                  10      10            19       loss  0.329010  0.203578   \n",
       "3                  10      10            19  precision  0.966667  0.870370   \n",
       "4                  10      10            19     recall  0.962963  0.857143   \n",
       "5                  10      10            19    roc_auc  1.000000  0.972789   \n",
       "\n",
       "     pstdev    median      mean  \n",
       "0  0.043541  0.921569  0.913891  \n",
       "1  0.044030  0.920468  0.913028  \n",
       "2  0.055686  0.219878  0.250822  \n",
       "3  0.040217  0.936508  0.924515  \n",
       "4  0.043541  0.921569  0.913891  \n",
       "5  0.012149  0.996828  0.989872  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "queue_multiclass.metrics_aggregate_to_pandas(\n",
    "    selected_metrics=None\n",
    "    , selected_stats=None\n",
    "    , sort_by='predictor_id'\n",
    "    , ascending=True\n",
    ").head(12)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Job Visualization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Loss values in the first few epochs can often be extremely high before they plummet and become more gradual. This really stretches out the graph and makes it hard to see if the evaluation set is diverging or not. The `loss_skip_15pct:bool` parameter skips displaying the first 15% of epochs so that figure is more useful."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "queue_multiclass.jobs[0].predictors[0].plot_learning_curve(loss_skip_15pct=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Classify Learn](../images/plot_classify_learn.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "queue_multiclass.jobs[0].predictors[0].predictions[0].plot_feature_importance(top_n=4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Classify Features](../images/plot_classify_features.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These classification metrics are preformatted for plotting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['confusion_matrix', 'roc_curve', 'precision_recall_curve'])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "queue_multiclass.jobs[0].predictors[0].predictions[0].plot_data['test'].keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "queue_multiclass.jobs[0].predictors[0].predictions[0].plot_roc_curve()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Classify ROC](../images/plot_roc.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "queue_multiclass.jobs[0].predictors[0].predictions[0].plot_confusion_matrix()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Plot Confusion](../images/plot_confusion_matrix.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "queue_multiclass.jobs[0].predictors[0].predictions[0].plot_precision_recall()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Precision Recall](../images/plot_precision_recall.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Job Metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each training `Prediction` contains the following metrics by split/fold:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from pprint import pprint as p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'test': {'accuracy': 0.9629629629629629,\n",
      "          'f1': 0.9628482972136223,\n",
      "          'loss': 0.2035779356956482,\n",
      "          'precision': 0.9666666666666667,\n",
      "          'recall': 0.9629629629629629,\n",
      "          'roc_auc': 1.0},\n",
      " 'train': {'accuracy': 0.9215686274509803,\n",
      "           'f1': 0.92046783625731,\n",
      "           'loss': 0.21987806260585785,\n",
      "           'precision': 0.9365079365079364,\n",
      "           'recall': 0.9215686274509803,\n",
      "           'roc_auc': 0.9968281430219147},\n",
      " 'validation': {'accuracy': 0.8571428571428571,\n",
      "                'f1': 0.8557692307692308,\n",
      "                'loss': 0.3290098011493683,\n",
      "                'precision': 0.8703703703703705,\n",
      "                'recall': 0.8571428571428571,\n",
      "                'roc_auc': 0.9727891156462586}}\n"
     ]
    }
   ],
   "source": [
    "p(queue_multiclass.jobs[0].predictors[0].predictions[0].metrics)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It also contains per-epoch `History` metrics calculated during model training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "queue_multiclass.jobs[0].predictors[0].history.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's quickly generate a trained quantification model to inspect."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "queue_regression = tests.make_test_queue('keras_regression')\n",
    "queue_regression.run_jobs()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Queue Visualization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When performing regression, the secondary training metric (non-loss) is 'r2'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "queue_regression.plot_performance(\n",
    "    max_loss=1.5, min_r2=0.65\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Regression Boomerang](../images/plot_regression_boomerang.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Queue Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hyperparamcombo_id</th>\n",
       "      <th>job_id</th>\n",
       "      <th>predictor_id</th>\n",
       "      <th>split</th>\n",
       "      <th>explained_variance</th>\n",
       "      <th>loss</th>\n",
       "      <th>mse</th>\n",
       "      <th>r2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>19</td>\n",
       "      <td>train</td>\n",
       "      <td>0.033659</td>\n",
       "      <td>0.733253</td>\n",
       "      <td>0.971462</td>\n",
       "      <td>0.028538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>19</td>\n",
       "      <td>validation</td>\n",
       "      <td>0.041182</td>\n",
       "      <td>0.723081</td>\n",
       "      <td>0.945438</td>\n",
       "      <td>0.015246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>19</td>\n",
       "      <td>test</td>\n",
       "      <td>0.006876</td>\n",
       "      <td>0.599482</td>\n",
       "      <td>0.636772</td>\n",
       "      <td>0.002019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   hyperparamcombo_id  job_id  predictor_id       split  explained_variance  \\\n",
       "0                  11      11            19       train            0.033659   \n",
       "1                  11      11            19  validation            0.041182   \n",
       "2                  11      11            19        test            0.006876   \n",
       "\n",
       "       loss       mse        r2  \n",
       "0  0.733253  0.971462  0.028538  \n",
       "1  0.723081  0.945438  0.015246  \n",
       "2  0.599482  0.636772  0.002019  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "queue_regression.metrics_to_pandas().head(9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These are also aggregated by metric across all splits/folds."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hyperparamcombo_id</th>\n",
       "      <th>job_id</th>\n",
       "      <th>predictor_id</th>\n",
       "      <th>metric</th>\n",
       "      <th>maximum</th>\n",
       "      <th>minimum</th>\n",
       "      <th>pstdev</th>\n",
       "      <th>median</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>20</td>\n",
       "      <td>explained_variance</td>\n",
       "      <td>0.041182</td>\n",
       "      <td>0.006876</td>\n",
       "      <td>0.014723</td>\n",
       "      <td>0.033659</td>\n",
       "      <td>0.027239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>20</td>\n",
       "      <td>loss</td>\n",
       "      <td>0.733253</td>\n",
       "      <td>0.599482</td>\n",
       "      <td>0.060805</td>\n",
       "      <td>0.723081</td>\n",
       "      <td>0.685272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>20</td>\n",
       "      <td>mse</td>\n",
       "      <td>0.971462</td>\n",
       "      <td>0.636772</td>\n",
       "      <td>0.152012</td>\n",
       "      <td>0.945438</td>\n",
       "      <td>0.851224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>20</td>\n",
       "      <td>r2</td>\n",
       "      <td>0.028538</td>\n",
       "      <td>0.002019</td>\n",
       "      <td>0.010827</td>\n",
       "      <td>0.015246</td>\n",
       "      <td>0.015268</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   hyperparamcombo_id  job_id  predictor_id              metric   maximum  \\\n",
       "0                  11      11            20  explained_variance  0.041182   \n",
       "1                  11      11            20                loss  0.733253   \n",
       "2                  11      11            20                 mse  0.971462   \n",
       "3                  11      11            20                  r2  0.028538   \n",
       "\n",
       "    minimum    pstdev    median      mean  \n",
       "0  0.006876  0.014723  0.033659  0.027239  \n",
       "1  0.599482  0.060805  0.723081  0.685272  \n",
       "2  0.636772  0.152012  0.945438  0.851224  \n",
       "3  0.002019  0.010827  0.015246  0.015268  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "queue_regression.metrics_aggregate_to_pandas().tail(12)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Job Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "queue_regression.jobs[0].predictors[0].plot_learning_curve(loss_skip_15pct=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Regression Learn](../images/plot_regression_learn.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "queue_regression.jobs[0].predictors[0].predictions[0].plot_feature_importance(top_n=12)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Regression Features](../images/plot_regression_features.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Job Metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each training `Prediction` contains the following metrics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'test': {'explained_variance': 0.006876392861274172,\n",
      "          'loss': 0.5994815230369568,\n",
      "          'mse': 0.6367720159085998,\n",
      "          'r2': 0.0020185652597658477},\n",
      " 'train': {'explained_variance': 0.0336593253630777,\n",
      "           'loss': 0.7332529425621033,\n",
      "           'mse': 0.9714619941285391,\n",
      "           'r2': 0.028538005871460936},\n",
      " 'validation': {'explained_variance': 0.041182110870757516,\n",
      "                'loss': 0.7230809926986694,\n",
      "                'mse': 0.9454382769758778,\n",
      "                'r2': 0.015246362433524951}}\n"
     ]
    }
   ],
   "source": [
    "p(queue_regression.jobs[0].predictors[0].predictions[0].metrics)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It also contains per-epoch metrics calculated during model training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['loss', 'mean_squared_error', 'val_loss', 'val_mean_squared_error'])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "queue_regression.jobs[0].predictors[0].history.keys()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
