{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6d18fb50-aea4-479f-a782-dde419b50594",
   "metadata": {},
   "source": [
    "# Query the Metastore"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d4058c5-c195-46a0-9e31-21a12771b7aa",
   "metadata": {},
   "source": [
    "![query](../images/notebook/query.jpg)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ddaeaf2-8a4f-4030-989b-fb97fdc6edfc",
   "metadata": {},
   "source": [
    "AIQC uses SQLite under the hood as a machine learning metastore. It persists critical information at every step of the workflow that helps practitioners:\n",
    "\n",
    "- Interpret the performance of models\n",
    "- Reproduce experiments\n",
    "- Encode new samples during inference\n",
    "\n",
    "Each object in the [Low-Level API](api_low_level.html) (e.g. `Job`, `Predictor`, `Splitset`, `Feature`, `Dataset`, and many more) is a relational table in local SQLite file. The Low-Level API serves as an object-relational model (ORM) to easily traverse and inspect that metastore as Python objects. Please know that these examples just scratch the surface of the Low-Level API."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "recent-mapping",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a722ab02-47f6-4f89-8630-a2f1efdd4857",
   "metadata": {},
   "source": [
    "Let's rapidly create a trained queue of models so that we have some information to work with. We'll use one of AIQC's tests for the sake of brevity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "d2dedec4-0ee0-4020-88e8-4e10fa3ac51d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from aiqc import mlops, datum, lab, tests\n",
    "queue = tests.tf_multi_tab.make_queue()\n",
    "queue.run_jobs()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f4490c9-3137-42fa-8581-91f7d4f62257",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5a7018e-24d6-439a-a983-9edb6b9dd592",
   "metadata": {},
   "source": [
    "## Inspecting the Modeling Process"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb4ed6cb-572b-4d4b-933b-8148ff18d5b2",
   "metadata": {},
   "source": [
    "### How well did the models in the `Queue` perform?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "406dd0f6-761a-411e-9613-48c9fe812a1e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "queue.plot_performance(min_score=0.94, max_loss=0.09)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66c81b3f-6fb6-482f-875b-c2e5592f4d85",
   "metadata": {
    "tags": []
   },
   "source": [
    "![boomerang](../images/visualization/classify_boomerang.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "d45617f4-1b2a-4aa7-8a87-a5dc934a8646",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hyperparamcombo_id</th>\n",
       "      <th>job_id</th>\n",
       "      <th>predictor_id</th>\n",
       "      <th>split</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>f1</th>\n",
       "      <th>loss</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>roc_auc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>test</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.029</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>validation</td>\n",
       "      <td>0.926</td>\n",
       "      <td>0.925</td>\n",
       "      <td>0.095</td>\n",
       "      <td>0.939</td>\n",
       "      <td>0.926</td>\n",
       "      <td>0.996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>train</td>\n",
       "      <td>0.962</td>\n",
       "      <td>0.962</td>\n",
       "      <td>0.059</td>\n",
       "      <td>0.963</td>\n",
       "      <td>0.962</td>\n",
       "      <td>0.999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>test</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.048</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>validation</td>\n",
       "      <td>0.963</td>\n",
       "      <td>0.963</td>\n",
       "      <td>0.082</td>\n",
       "      <td>0.967</td>\n",
       "      <td>0.963</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>train</td>\n",
       "      <td>0.962</td>\n",
       "      <td>0.962</td>\n",
       "      <td>0.073</td>\n",
       "      <td>0.963</td>\n",
       "      <td>0.962</td>\n",
       "      <td>0.998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>test</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.031</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>validation</td>\n",
       "      <td>0.963</td>\n",
       "      <td>0.963</td>\n",
       "      <td>0.077</td>\n",
       "      <td>0.967</td>\n",
       "      <td>0.963</td>\n",
       "      <td>0.998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>train</td>\n",
       "      <td>0.981</td>\n",
       "      <td>0.981</td>\n",
       "      <td>0.058</td>\n",
       "      <td>0.981</td>\n",
       "      <td>0.981</td>\n",
       "      <td>0.999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>validation</td>\n",
       "      <td>0.963</td>\n",
       "      <td>0.963</td>\n",
       "      <td>0.094</td>\n",
       "      <td>0.967</td>\n",
       "      <td>0.963</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>test</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.072</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>train</td>\n",
       "      <td>0.981</td>\n",
       "      <td>0.981</td>\n",
       "      <td>0.089</td>\n",
       "      <td>0.982</td>\n",
       "      <td>0.981</td>\n",
       "      <td>0.999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>test</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.030</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>validation</td>\n",
       "      <td>0.889</td>\n",
       "      <td>0.888</td>\n",
       "      <td>0.107</td>\n",
       "      <td>0.898</td>\n",
       "      <td>0.889</td>\n",
       "      <td>0.996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>train</td>\n",
       "      <td>0.962</td>\n",
       "      <td>0.962</td>\n",
       "      <td>0.059</td>\n",
       "      <td>0.963</td>\n",
       "      <td>0.962</td>\n",
       "      <td>0.999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>test</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.066</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>validation</td>\n",
       "      <td>0.963</td>\n",
       "      <td>0.963</td>\n",
       "      <td>0.096</td>\n",
       "      <td>0.967</td>\n",
       "      <td>0.963</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>train</td>\n",
       "      <td>0.971</td>\n",
       "      <td>0.971</td>\n",
       "      <td>0.094</td>\n",
       "      <td>0.972</td>\n",
       "      <td>0.971</td>\n",
       "      <td>0.998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>test</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.035</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>validation</td>\n",
       "      <td>0.963</td>\n",
       "      <td>0.963</td>\n",
       "      <td>0.090</td>\n",
       "      <td>0.967</td>\n",
       "      <td>0.963</td>\n",
       "      <td>0.998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>train</td>\n",
       "      <td>0.962</td>\n",
       "      <td>0.962</td>\n",
       "      <td>0.062</td>\n",
       "      <td>0.963</td>\n",
       "      <td>0.962</td>\n",
       "      <td>0.999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>validation</td>\n",
       "      <td>0.926</td>\n",
       "      <td>0.925</td>\n",
       "      <td>0.103</td>\n",
       "      <td>0.939</td>\n",
       "      <td>0.926</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>test</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.075</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>train</td>\n",
       "      <td>0.962</td>\n",
       "      <td>0.962</td>\n",
       "      <td>0.091</td>\n",
       "      <td>0.963</td>\n",
       "      <td>0.962</td>\n",
       "      <td>0.998</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    hyperparamcombo_id  job_id  predictor_id       split  accuracy     f1  \\\n",
       "23                   9       9             9        test     1.000  1.000   \n",
       "22                   9       9             9  validation     0.926  0.925   \n",
       "21                   9       9             9       train     0.962  0.962   \n",
       "20                   8       8             8        test     1.000  1.000   \n",
       "19                   8       8             8  validation     0.963  0.963   \n",
       "18                   8       8             8       train     0.962  0.962   \n",
       "17                   7       7             7        test     1.000  1.000   \n",
       "16                   7       7             7  validation     0.963  0.963   \n",
       "15                   7       7             7       train     0.981  0.981   \n",
       "13                   6       6             6  validation     0.963  0.963   \n",
       "14                   6       6             6        test     1.000  1.000   \n",
       "12                   6       6             6       train     0.981  0.981   \n",
       "11                   5       5             5        test     1.000  1.000   \n",
       "10                   5       5             5  validation     0.889  0.888   \n",
       "9                    5       5             5       train     0.962  0.962   \n",
       "8                    4       4             4        test     1.000  1.000   \n",
       "7                    4       4             4  validation     0.963  0.963   \n",
       "6                    4       4             4       train     0.971  0.971   \n",
       "5                    3       3             3        test     1.000  1.000   \n",
       "4                    3       3             3  validation     0.963  0.963   \n",
       "3                    3       3             3       train     0.962  0.962   \n",
       "1                    2       2             2  validation     0.926  0.925   \n",
       "2                    2       2             2        test     1.000  1.000   \n",
       "0                    2       2             2       train     0.962  0.962   \n",
       "\n",
       "     loss  precision  recall  roc_auc  \n",
       "23  0.029      1.000   1.000    1.000  \n",
       "22  0.095      0.939   0.926    0.996  \n",
       "21  0.059      0.963   0.962    0.999  \n",
       "20  0.048      1.000   1.000    1.000  \n",
       "19  0.082      0.967   0.963    1.000  \n",
       "18  0.073      0.963   0.962    0.998  \n",
       "17  0.031      1.000   1.000    1.000  \n",
       "16  0.077      0.967   0.963    0.998  \n",
       "15  0.058      0.981   0.981    0.999  \n",
       "13  0.094      0.967   0.963    1.000  \n",
       "14  0.072      1.000   1.000    1.000  \n",
       "12  0.089      0.982   0.981    0.999  \n",
       "11  0.030      1.000   1.000    1.000  \n",
       "10  0.107      0.898   0.889    0.996  \n",
       "9   0.059      0.963   0.962    0.999  \n",
       "8   0.066      1.000   1.000    1.000  \n",
       "7   0.096      0.967   0.963    1.000  \n",
       "6   0.094      0.972   0.971    0.998  \n",
       "5   0.035      1.000   1.000    1.000  \n",
       "4   0.090      0.967   0.963    0.998  \n",
       "3   0.062      0.963   0.962    0.999  \n",
       "1   0.103      0.939   0.926    1.000  \n",
       "2   0.075      1.000   1.000    1.000  \n",
       "0   0.091      0.963   0.962    0.998  "
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "queue.metrics_to_pandas()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba7847d5-922f-49af-b6b4-a9ad7d1af356",
   "metadata": {},
   "source": [
    "### What training `Jobs` belong to the `Queue`?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "221a43f7-2eb3-4398-9efa-17449605b7e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<Job: 2>,\n",
       " <Job: 3>,\n",
       " <Job: 4>,\n",
       " <Job: 5>,\n",
       " <Job: 6>,\n",
       " <Job: 7>,\n",
       " <Job: 8>,\n",
       " <Job: 9>]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(queue.jobs)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70fe043c-2a9f-4823-85f3-1a41eceaf401",
   "metadata": {},
   "source": [
    "### A `Job` stores information about its trained model in a `Predictor`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "6b2aeba0-6f81-4600-ac7c-b2f8589c1f63",
   "metadata": {},
   "outputs": [],
   "source": [
    "predictor = queue.jobs[0].predictors[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d89005d2-1c30-44dc-9f17-8b49f32086fa",
   "metadata": {},
   "source": [
    "The model object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "aa9d7a45-2de8-4763-8582-0c86c93acb78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<keras.engine.sequential.Sequential at 0x191368e90>"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictor.get_model()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ddd2931-26d5-4151-bb93-5a462249f7ea",
   "metadata": {},
   "source": [
    "The user-defined training metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a8ee6ac-71aa-4822-b79a-ecc047db08f1",
   "metadata": {},
   "source": [
    "The hyperparameters that were fed to this specific job"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "fd40f0ec-9491-454f-982d-6155d109f801",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>param</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>neuron_count</td>\n",
       "      <td>9.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>batch_size</td>\n",
       "      <td>3.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>learning_rate</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>epoch_count</td>\n",
       "      <td>30.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           param  value\n",
       "0   neuron_count   9.00\n",
       "1     batch_size   3.00\n",
       "2  learning_rate   0.03\n",
       "3    epoch_count  30.00"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictor.get_hyperparameters(as_pandas=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f96ff13-3e8b-4f8c-9f60-5503097cc0d7",
   "metadata": {
    "tags": []
   },
   "source": [
    "### How did this model perform?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "dad0a048-1279-47d0-bf6f-b76a261c12e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictor.history.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "42206365-906d-42f2-8cf2-adc35b909d9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.7967078685760498,\n",
       " 0.6094738841056824,\n",
       " 0.5092198848724365,\n",
       " 0.4443624019622803,\n",
       " 0.38863012194633484,\n",
       " 0.34954071044921875,\n",
       " 0.3077627122402191,\n",
       " 0.2807725667953491,\n",
       " 0.2461201548576355,\n",
       " 0.2245447188615799]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictor.history['val_loss'][:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b9a08b1-dbc3-49ec-932a-c08fc2f7fd8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "predictor.plot_learning_curve()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "624c1b90-f358-4568-b696-dad653bfdb5d",
   "metadata": {},
   "source": [
    "![Classify Learn](../images/visualization/classify_learn.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "638909c7-59b4-4689-bc5e-77fe74ef9fd8",
   "metadata": {},
   "source": [
    "View the decoded predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "e0e271da-e275-4a02-b5ae-b2ca917ef5f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "prediction = predictor.predictions[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "db28e188-37f1-4620-96bf-5f53a9dd3d25",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['train', 'validation', 'test'])"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction.predictions.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "89bbad6f-1d52-421f-a2a4-c79deb51a1de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['setosa', 'setosa', 'setosa', 'setosa', 'setosa', 'setosa',\n",
       "       'versicolor', 'versicolor', 'versicolor', 'versicolor'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction.predictions['test'][:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4291535e-78a7-48b6-b4f8-6f2862365124",
   "metadata": {},
   "outputs": [],
   "source": [
    "prediction.plot_confusion_matrix()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21b1a4c3-011d-4b13-81df-950edc735e9e",
   "metadata": {},
   "source": [
    "![Plot Confusion](../images/visualization/classify_confusion.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "de419de1-fc6f-410c-8541-97b4941a5c2e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method Prediction.plot_precision_recall of <Prediction: 2>>"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# etc\n",
    "prediction.plot_roc_curve()\n",
    "prediction.plot_precision_recall()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49609fba-6330-4370-a37a-49a78ac79e5f",
   "metadata": {},
   "source": [
    "What features were driving the model?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "59b4b4fc-8af6-4918-a82b-5db12837319e",
   "metadata": {},
   "outputs": [],
   "source": [
    "prediction.plot_feature_importance(top_n=4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eca23026-4a5b-41e4-9508-245d25e78001",
   "metadata": {},
   "source": [
    "![Classify Features](../images/visualization/classify_features.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df664931-6a2a-4400-b968-4fae9788bad1",
   "metadata": {},
   "source": [
    "### What `Algorithm` was the `Queue` training?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "141ec69a-2aa5-408d-85b9-c7c49febf6b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "algorithm = queue.algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "a02b58ba-3cdf-4401-906c-4347f8d927ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'keras'"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "algorithm.library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "97781669-8384-4c12-92d5-67281561e45f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'classification_multi'"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "algorithm.analysis_type"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "591441cc-2b80-4388-b58d-2e6c7a393ea5",
   "metadata": {},
   "source": [
    "What did the architecture look like?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "83d5c15c-1ab1-4a79-9fcc-27c6dec0a459",
   "metadata": {},
   "outputs": [],
   "source": [
    "from aiqc.utils.dill import reveal_code\n",
    "# Looks like I can make these calls more elegant/ concise =)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "82abe241-d7f1-4645-ac73-1934b9c4a3d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "def fn_train(model, loser, optimizer, samples_train, samples_evaluate, **hp):\n",
      "    model.compile(\n",
      "        loss = loser\n",
      "        , optimizer = optimizer\n",
      "        , metrics = ['accuracy']\n",
      "    )\n",
      "    model.fit(\n",
      "        samples_train[\"features\"]\n",
      "        , samples_train[\"labels\"]\n",
      "        , validation_data = (\n",
      "            samples_evaluate[\"features\"]\n",
      "            , samples_evaluate[\"labels\"]\n",
      "        )\n",
      "        , verbose = 0\n",
      "        , batch_size = hp['batch_size']\n",
      "        , epochs = hp['epoch_count']\n",
      "        , callbacks=[tf.keras.callbacks.History()]\n",
      "    )\n",
      "    return model\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'d'"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reveal_code(algorithm.fn_train)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "99b54e59-1c7e-45bc-b6fb-091e6f4a934f",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# etc\n",
    "reveal_code(algorithm.fn_train)[0]\n",
    "reveal_code(algorithm.fn_lose)[0]\n",
    "reveal_code(algorithm.fn_optimize)[0]\n",
    "reveal_code(algorithm.fn_predict)[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c65f2673-2b2f-4285-97d2-bf1a43659c7b",
   "metadata": {},
   "source": [
    "### What `hyperparameter` space was tested?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "2ab0c8f8-938a-4eb2-87cd-87e413a43c3f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'neuron_count': [9, 12],\n",
       " 'batch_size': [3],\n",
       " 'learning_rate': [0.03, 0.05],\n",
       " 'epoch_count': [30, 60]}"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "queue.algorithm.hyperparamsets[0].hyperparameters"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73cca692-3fd0-4a57-b130-2c7ac2d44ace",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "979fee94-8008-49ca-ae1f-367d89602066",
   "metadata": {},
   "source": [
    "## Inspecting the Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fa03fed-1eac-49d7-84ff-e32006b93bc8",
   "metadata": {},
   "source": [
    "### What `samples` were fed to the algorithm?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "710db5ac-b534-46af-9e86-a5e2201a2905",
   "metadata": {},
   "outputs": [],
   "source": [
    "splitset = queue.splitset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67b7e08f-289e-46c2-94e0-314a44401312",
   "metadata": {},
   "source": [
    "How was the data divided into splits?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "2985cae0-8efd-4777-85c9-7e490354915d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'validation': {'percent': 0.18, 'count': 27},\n",
       " 'test': {'percent': 0.12, 'count': 18},\n",
       " 'train': {'percent': 0.7, 'count': 105}}"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "splitset.sizes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "676dfe7e-7b6b-48b2-bf93-f43326bad416",
   "metadata": {},
   "source": [
    "Which sample indices belong to which split?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "713afd39-8d3e-446f-9813-bb3fdf61474a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[4, 6, 23, 32, 38, 49, 54, 64, 71, 78]"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "splitset.samples['test'][:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97914779-6b27-4c2e-8560-aa2db65665c4",
   "metadata": {},
   "source": [
    "### What `Features` were used to train the model?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3e0cab7-6854-435e-97c1-4132d82dbde9",
   "metadata": {},
   "source": [
    "There are multiple `Features` because AIQC support multi-modal analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "073d7a71-82af-48fb-965b-e22a42f3e65c",
   "metadata": {},
   "outputs": [],
   "source": [
    "feature = splitset.get_features()[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "86319980-c6c5-497b-807a-a542420bfa4a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['sepal_length', 'sepal_width', 'petal_length', 'petal_width']"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "a6103567-c796-47da-8c36-8947bdbc7bfd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['species']"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature.columns_excluded"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0742ee4d-b1a8-4f22-9dbf-262dd2f1d198",
   "metadata": {},
   "source": [
    "### What were the `Labels`?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "0542dc30-dfd2-47b4-9def-a06523b8fd10",
   "metadata": {},
   "outputs": [],
   "source": [
    "label = splitset.label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "6b1e3dca-76ed-4339-a9dd-42bacdff3955",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['species']"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "label.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "9d44528d-42ce-445f-92ab-abb6695fe720",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['setosa', 'versicolor', 'virginica']"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "label.unique_classes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "669d4d63-4017-4176-a156-c81d96bc2fa8",
   "metadata": {},
   "source": [
    "### What `Dataset` did these `Features` and `Labels` come from?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "130bd7ed-5371-4360-9ece-b94736e26312",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = feature.dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "9d709636-c6c1-48fc-ae89-0beb702d44d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'tabular'"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.dataset_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "76c15eda-b890-447d-a218-517ada5b2867",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.file_count"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e39621b4-f76d-4c47-8172-18082a63ed8c",
   "metadata": {},
   "source": [
    "This dataset was created from an in-memory dataframe so there is no file path associated with it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "682f54f6-0e7d-4ca2-a8d7-6514dfbaea74",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset.source_path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "7600d2e0-a2b2-4650-b0b0-2815f5fd222e",
   "metadata": {},
   "outputs": [],
   "source": [
    "file = dataset.files[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "81ad0c1a-ac46-4762-8845-c2a3efb5d645",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file.is_ingested"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "203f2467-43f7-49df-bda5-55db91d68673",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'rows': 150, 'columns': 5}"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "a66ffd76-db38-436d-adf8-224a707181ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species']"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "64635edf-4c3f-4592-a684-d60f779f2ad3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'sepal_length': 'float64',\n",
       " 'sepal_width': 'float64',\n",
       " 'petal_length': 'float64',\n",
       " 'petal_width': 'float64',\n",
       " 'species': 'object'}"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab3e1cd9-e751-4a49-8e74-10f82225102b",
   "metadata": {},
   "source": [
    "### How were the `Labels` and `Features` encoded during training?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "d98038e2-3d4c-4fef-964a-cbe96b033e82",
   "metadata": {},
   "outputs": [],
   "source": [
    "job = queue.jobs[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "29d67e8e-3e36-4728-abc4-080eed8a4e86",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<FittedLabelCoder: 2>"
      ]
     },
     "execution_count": 183,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "job.fittedlabelcoders[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "5d7435f6-4f9f-408a-80f7-0f37dcc9228b",
   "metadata": {},
   "outputs": [],
   "source": [
    "labelcoder = job.fittedlabelcoders[0].labelcoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "471c990b-910f-45c2-a7bd-5a71a9e9d2b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labelcoder.only_fit_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "7bf8ba27-2022-4c76-a143-6cee7b71a33c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OneHotEncoder(sparse=False)"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labelcoder.sklearn_preprocess"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "bb22e7dc-463b-4c6b-8170-4d22073d4b22",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['species']"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labelcoder.matching_columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "5c5108bf-bd44-4d44-8860-f4ff6626327e",
   "metadata": {},
   "outputs": [],
   "source": [
    "fitted_encoder = job.fittedlabelcoders[0].fitted_encoders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "49283fd4-9e15-4bc8-9c77-47e9820bb75b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OneHotEncoder(sparse=False)"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fitted_encoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "745e46d4-d79e-428e-8fdd-7e039b7d0726",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array(['setosa', 'versicolor', 'virginica'], dtype=object)]"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fitted_encoder.categories_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "1370b734-33cf-4dcf-87b1-819532f99f42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array(['setosa', 'versicolor', 'virginica'], dtype=object)]"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fitted_encoder"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e6800e1-0a0b-4cab-a98a-007ff110b27f",
   "metadata": {},
   "source": [
    "This information is *CRITICAL* for:\n",
    "\n",
    "- Decoding raw predictions into human-readable insight.\n",
    "- Encoding new samples during inference.\n",
    "- Recreating the experiment. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
